module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    input s,
    input co,
    output a,
    output b,
    output ci //inputs to full adder
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    adderInput adderInput;

 
  }
  }
   
  
  always {
    a = 0;
    b = 0;
    ci = 0;
    
    if (!adderInput.error){ //feed inputs into full adder circuit if not in error state
      a = adderInput.a;
      b = adderInput.b;
      ci = adderInput.ci;
    }
    adderInput.s = s;
    adderInput.co = co;
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    io_led = 3x{{8h00}};    // turn LEDs off
    io_led[0] = 8x{adderInput.a}; //use LEDs on IO shield to indicate state of state machine
    io_led[1] = 8x{adderInput.b};
    io_led[2] = 8x{adderInput.ci};
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    

  }
}